/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "debyer"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "debyer"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.4"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *full_help_help; /**< @brief Print help, including hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  const char *quiet_help; /**< @brief silent mode help description.  */
  unsigned int verbose_min; /**< @brief increase verbosity level (can be used twice)'s minimum occurreces */
  unsigned int verbose_max; /**< @brief increase verbosity level (can be used twice)'s maximum occurreces */
  const char *verbose_help; /**< @brief increase verbosity level (can be used twice) help description.  */
  int bench_arg;	/**< @brief benchmark - reports time of ID calculation for ATOM-COUNT atoms..  */
  char * bench_orig;	/**< @brief benchmark - reports time of ID calculation for ATOM-COUNT atoms. original value given at command line.  */
  const char *bench_help; /**< @brief benchmark - reports time of ID calculation for ATOM-COUNT atoms. help description.  */
  float cutoff_arg;	/**< @brief cut-off distance for ID calculation.  */
  char * cutoff_orig;	/**< @brief cut-off distance for ID calculation original value given at command line.  */
  const char *cutoff_help; /**< @brief cut-off distance for ID calculation help description.  */
  float quanta_arg;	/**< @brief ID discretization quanta (default='0.001').  */
  char * quanta_orig;	/**< @brief ID discretization quanta original value given at command line.  */
  const char *quanta_help; /**< @brief ID discretization quanta help description.  */
  float pbc_a_arg;	/**< @brief PBC box length in x direction.  */
  char * pbc_a_orig;	/**< @brief PBC box length in x direction original value given at command line.  */
  const char *pbc_a_help; /**< @brief PBC box length in x direction help description.  */
  float pbc_b_arg;	/**< @brief PBC box length in y direction.  */
  char * pbc_b_orig;	/**< @brief PBC box length in y direction original value given at command line.  */
  const char *pbc_b_help; /**< @brief PBC box length in y direction help description.  */
  float pbc_c_arg;	/**< @brief PBC box length in z direction.  */
  char * pbc_c_orig;	/**< @brief PBC box length in z direction original value given at command line.  */
  const char *pbc_c_help; /**< @brief PBC box length in z direction help description.  */
  int sample_arg;	/**< @brief calculate ID by random sampling n atoms.  */
  char * sample_orig;	/**< @brief calculate ID by random sampling n atoms original value given at command line.  */
  const char *sample_help; /**< @brief calculate ID by random sampling n atoms help description.  */
  char * save_id_arg;	/**< @brief save ID to file.  */
  char * save_id_orig;	/**< @brief save ID to file original value given at command line.  */
  const char *save_id_help; /**< @brief save ID to file help description.  */
  float x_gt_arg;	/**< @brief minimum in x direction.  */
  char * x_gt_orig;	/**< @brief minimum in x direction original value given at command line.  */
  const char *x_gt_help; /**< @brief minimum in x direction help description.  */
  float x_lt_arg;	/**< @brief maximum in x direction.  */
  char * x_lt_orig;	/**< @brief maximum in x direction original value given at command line.  */
  const char *x_lt_help; /**< @brief maximum in x direction help description.  */
  float y_gt_arg;	/**< @brief minimum in y direction.  */
  char * y_gt_orig;	/**< @brief minimum in y direction original value given at command line.  */
  const char *y_gt_help; /**< @brief minimum in y direction help description.  */
  float y_lt_arg;	/**< @brief maximum in y direction.  */
  char * y_lt_orig;	/**< @brief maximum in y direction original value given at command line.  */
  const char *y_lt_help; /**< @brief maximum in y direction help description.  */
  float z_gt_arg;	/**< @brief minimum in z direction.  */
  char * z_gt_orig;	/**< @brief minimum in z direction original value given at command line.  */
  const char *z_gt_help; /**< @brief minimum in z direction help description.  */
  float z_lt_arg;	/**< @brief maximum in z direction.  */
  char * z_lt_orig;	/**< @brief maximum in z direction original value given at command line.  */
  const char *z_lt_help; /**< @brief maximum in z direction help description.  */
  const char *xray_help; /**< @brief x-ray powder pattern help description.  */
  const char *neutron_help; /**< @brief neutron powder pattern help description.  */
  const char *sf_help; /**< @brief scattering factor (a.k.a total scattering structure function) help description.  */
  const char *RDF_help; /**< @brief radial distribution function (RDF) help description.  */
  const char *PDF_help; /**< @brief pair distribution function (PDF) help description.  */
  const char *rPDF_help; /**< @brief reduced PDF help description.  */
  float from_arg;	/**< @brief start of calculated pattern.  */
  char * from_orig;	/**< @brief start of calculated pattern original value given at command line.  */
  const char *from_help; /**< @brief start of calculated pattern help description.  */
  float to_arg;	/**< @brief end of calculated pattern.  */
  char * to_orig;	/**< @brief end of calculated pattern original value given at command line.  */
  const char *to_help; /**< @brief end of calculated pattern help description.  */
  float step_arg;	/**< @brief step of calculated pattern.  */
  char * step_orig;	/**< @brief step of calculated pattern original value given at command line.  */
  const char *step_help; /**< @brief step of calculated pattern help description.  */
  char * weight_arg;	/**< @brief weighting by x-ray f(0) or neutron b (default='1').  */
  char * weight_orig;	/**< @brief weighting by x-ray f(0) or neutron b original value given at command line.  */
  const char *weight_help; /**< @brief weighting by x-ray f(0) or neutron b help description.  */
  const char *partials_help; /**< @brief include partials as extra columns help description.  */
  float lambda_arg;	/**< @brief wavelength (omit for a pattern in Q).  */
  char * lambda_orig;	/**< @brief wavelength (omit for a pattern in Q) original value given at command line.  */
  const char *lambda_help; /**< @brief wavelength (omit for a pattern in Q) help description.  */
  const char *sinc_help; /**< @brief apply sinc damping (requires cut-off) help description.  */
  float ro_arg;	/**< @brief numeric density, required for (r)PDF and diffractogram with cutoff.  */
  char * ro_orig;	/**< @brief numeric density, required for (r)PDF and diffractogram with cutoff original value given at command line.  */
  const char *ro_help; /**< @brief numeric density, required for (r)PDF and diffractogram with cutoff help description.  */
  char * output_arg;	/**< @brief output filename. If not given, will be auto-generated..  */
  char * output_orig;	/**< @brief output filename. If not given, will be auto-generated. original value given at command line.  */
  const char *output_help; /**< @brief output filename. If not given, will be auto-generated. help description.  */
  char * write_xyz_arg;	/**< @brief XMOL .xyz file.  */
  char * write_xyz_orig;	/**< @brief XMOL .xyz file original value given at command line.  */
  const char *write_xyz_help; /**< @brief XMOL .xyz file help description.  */
  char * write_cfg_arg;	/**< @brief AtomEye extended .cfg file.  */
  char * write_cfg_orig;	/**< @brief AtomEye extended .cfg file original value given at command line.  */
  const char *write_cfg_help; /**< @brief AtomEye extended .cfg file help description.  */
  char * write_dlpoly_arg;	/**< @brief DL_POLY CONFIG file.  */
  char * write_dlpoly_orig;	/**< @brief DL_POLY CONFIG file original value given at command line.  */
  const char *write_dlpoly_help; /**< @brief DL_POLY CONFIG file help description.  */
  char * write_lammps_data_arg;	/**< @brief LAMMPS data file.  */
  char * write_lammps_data_orig;	/**< @brief LAMMPS data file original value given at command line.  */
  const char *write_lammps_data_help; /**< @brief LAMMPS data file help description.  */
  char * write_pdb_arg;	/**< @brief PDB file.  */
  char * write_pdb_orig;	/**< @brief PDB file original value given at command line.  */
  const char *write_pdb_help; /**< @brief PDB file help description.  */
  char * write_xyza_arg;	/**< @brief TSV format: x y z atom.  */
  char * write_xyza_orig;	/**< @brief TSV format: x y z atom original value given at command line.  */
  const char *write_xyza_help; /**< @brief TSV format: x y z atom help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int quiet_given ;	/**< @brief Whether quiet was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int bench_given ;	/**< @brief Whether bench was given.  */
  unsigned int cutoff_given ;	/**< @brief Whether cutoff was given.  */
  unsigned int quanta_given ;	/**< @brief Whether quanta was given.  */
  unsigned int pbc_a_given ;	/**< @brief Whether pbc-a was given.  */
  unsigned int pbc_b_given ;	/**< @brief Whether pbc-b was given.  */
  unsigned int pbc_c_given ;	/**< @brief Whether pbc-c was given.  */
  unsigned int sample_given ;	/**< @brief Whether sample was given.  */
  unsigned int save_id_given ;	/**< @brief Whether save-id was given.  */
  unsigned int x_gt_given ;	/**< @brief Whether x-gt was given.  */
  unsigned int x_lt_given ;	/**< @brief Whether x-lt was given.  */
  unsigned int y_gt_given ;	/**< @brief Whether y-gt was given.  */
  unsigned int y_lt_given ;	/**< @brief Whether y-lt was given.  */
  unsigned int z_gt_given ;	/**< @brief Whether z-gt was given.  */
  unsigned int z_lt_given ;	/**< @brief Whether z-lt was given.  */
  unsigned int xray_given ;	/**< @brief Whether xray was given.  */
  unsigned int neutron_given ;	/**< @brief Whether neutron was given.  */
  unsigned int sf_given ;	/**< @brief Whether sf was given.  */
  unsigned int RDF_given ;	/**< @brief Whether RDF was given.  */
  unsigned int PDF_given ;	/**< @brief Whether PDF was given.  */
  unsigned int rPDF_given ;	/**< @brief Whether rPDF was given.  */
  unsigned int from_given ;	/**< @brief Whether from was given.  */
  unsigned int to_given ;	/**< @brief Whether to was given.  */
  unsigned int step_given ;	/**< @brief Whether step was given.  */
  unsigned int weight_given ;	/**< @brief Whether weight was given.  */
  unsigned int partials_given ;	/**< @brief Whether partials was given.  */
  unsigned int lambda_given ;	/**< @brief Whether lambda was given.  */
  unsigned int sinc_given ;	/**< @brief Whether sinc was given.  */
  unsigned int ro_given ;	/**< @brief Whether ro was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int write_xyz_given ;	/**< @brief Whether write-xyz was given.  */
  unsigned int write_cfg_given ;	/**< @brief Whether write-cfg was given.  */
  unsigned int write_dlpoly_given ;	/**< @brief Whether write-dlpoly was given.  */
  unsigned int write_lammps_data_given ;	/**< @brief Whether write-lammps-data was given.  */
  unsigned int write_pdb_given ;	/**< @brief Whether write-pdb was given.  */
  unsigned int write_xyza_given ;	/**< @brief Whether write-xyza was given.  */

  char **inputs ; /**< @brief unnamed options (options without names) */
  unsigned inputs_num ; /**< @brief unnamed options number */
  int mode_group_counter; /**< @brief Counter for group mode */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *gengetopt_args_info_full_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void cmdline_parser_print_full_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_weight_values[];  /**< @brief Possible values for weight. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
